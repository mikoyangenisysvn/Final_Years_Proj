Day 1st 9/9/2025: t√¨m hi·ªÉu 
    - V·ªÅ l√≠ thuy·∫øt PWM m√¥ t·∫£ m·ªôt chu·ªói c√°c xung vu√¥ng nh∆∞ng ƒë·∫∑t bi·ªát ·ªü ch·ªó th·ªùi gian cho gi√° tr·ªã 1 v√† gi√° tr·ªã 0 
l√† kh√¥ng ƒë·ªÅu nhau, trong 1 chu k√¨ gi√° tr·ªã 1 c√≥ th·ªÉ nhi·ªÅu ho·∫∑c √≠t h∆°n gi√° tr·ªã 0.
C√ÇU H·ªéI: Chi d·ªã?
-> ·ª®ng d·ª•ng trong vi·ªác ƒëi·ªÅu khi·ªÉn ƒë·ªông c∆°, t·∫ßn s·ªë ch·ªõp t·∫Øt ƒë√®n t·∫°o t√≠n hi·ªáu,...
C√ÇU H·ªéI: R√≤i l√†m sao bi·∫øt 1 nhi·ªÅu hay √≠t h∆°n 0 trong 1 chu k√¨?
-> C√≥ 1 gi√° tr·ªã g·ªçi l√† duty cycle (t·∫°m d·ªãch: chu k√¨ nhi·ªám v·ª•; d·ªãch d·ªÖ nh·ªõ: nghƒ©a v·ª• xe ƒë·∫°p) th·ªÉ hi·ªán) % t·ªìn 
t·∫°i c·ªßa gi√° tr·ªã 1; v√≠ d·ª•:
            1 b·ªô counter ƒë·∫øm counter 8 bit nghƒ©a l√† ƒë·∫øm t·ª´ 0 t·ªõi 255 - 256 gi√° tr·ªã
            Duty cho l√† 64; l·∫•y (100*64)/256 = 25% => duty cycle = 25%

√ù T∆Ø·ªûNG CH·ªàNH S·ª¨A ƒê·ªí √ÅN TIMER_IP TH√ÄNH PWM
              +-------------------------+
           |        APB SLAVE        |
           | (gi·∫£i m√£ addr, ghi/ƒë·ªçc) |
           +-----------+-------------+
                       |
                       v
             +------------------+
             |   Register Block |
             | duty_reg         |
             | period_reg       |
             | ctrl_reg         |
             | status_reg       |
             +--+-----------+---+
                |           |
     duty ------+           +------ period
                            |
                          counter
                            |
            +---------------+---------------+
            |                               |
   counter value                        event: counter==period
            |                               |
            v                               v
   +------------------+             +---------------+
   |   Comparator     |             | Interrupt     |
   | if cnt < duty    |             | Logic         |
   |   PWM_OUT = 1    |             | - set flag    |
   | else 0           |             | - IRQ out     |
   +--------+---------+             +-------+-------+
            |                               |
         PWM_OUT                          IRQ

=============================================================================================================================
Day 2nd 10/9/2025: th√≠ nghi·ªám √Ω t∆∞·ªüng
                   +-------------------+
                   |      APB Bus      |
                   | (psel, penable,   |
                   |  pwrite, paddr,   |
                   |  pwdata, prdata)  |
                   +---------+---------+
                             |
                             v
                   +-------------------+
                   |     Register      |
                   |-------------------|
                   | DUTY_CYCLE [15:0] |
                   | PERIOD     [15:0] |
                   +---------+---------+
                             |
     +-----------------------+-----------------------+
     |                                               |
     v                                               v
+------------+                                +---------------+
|   Counter  |                                |  Comparator   |
|------------|   counter_value [15:0] ------> | counter vs    |
| count up   |                                | duty_cycle    |
| reset=0    |                                |               |
| when >=    |                                | pwm_out=1 if  |
| PERIOD     |                                | counter<duty  |
+------------+                                +-------+-------+
                                                     |
                                                     v
                                               +-------------+
                                               |   PWM_OUT   |
                                               +-------------+


Spec cho phi√™n b·∫£n PWM IP (m√¨nh so·∫°n d·∫°ng ƒë·ªÅ b√†i, gi·ªëng spec Timer IP c≈©)
1. Overview

The PWM IP core is an extension of the Timer IP. It generates a Pulse Width Modulated (PWM) output based on programmable period and duty cycle registers. The design includes an APB slave interface for CPU access, prescaler for frequency adjustment, and optional interrupt signaling.

2. Key Features

APB slave interface (12-bit address, 32-bit data).

Up-counter with programmable period register (PERIOD).

Compare logic with duty register (DUTY) to generate PWM output.

Output signal: pwm_out.

Prescaler (divide clock by 2‚Äì256).

Timer enable/disable via register.

Interrupt generation at end of PWM period (optional).

Asynchronous active-low reset.

Debug mode (halt counter when dbg_mode = 1).

3. Block Diagram (m√¥ t·∫£ text)

APB ‚Üí ƒëi·ªÅu khi·ªÉn ƒë·ªçc/ghi register.

Register ‚Üí ch·ª©a c√°c thanh ghi: PERIOD, DUTY, CTRL, STATUS, PRESCALER.

Control Counter ‚Üí t·∫°o cnt_en.

Counter ‚Üí ƒë·∫øm t·ª´ 0 ‚Üí PERIOD, sau ƒë√≥ reset v·ªÅ 0.

Comparator ‚Üí so s√°nh counter v·ªõi DUTY ƒë·ªÉ sinh pwm_out.

Interrupt ‚Üí b√°o khi counter = PERIOD (end of cycle).

Top module ‚Üí t√≠ch h·ª£p t·∫•t c·∫£.

4. Register Map (example)
Address	Name	Description
0x000	CTRL	[0] enable, [1] prescaler enable, [11:8] prescaler value
0x004	PERIOD	PWM period value
0x008	DUTY	PWM duty cycle value
0x00C	STATUS	[0] interrupt flag
0x010	INT_EN	[0] enable interrupt
0x014	CLEAR	write 1 to clear interrupt
5. Operation

CPU writes PERIOD and DUTY.

Counter increments each cnt_en cycle.

When counter < DUTY ‚Üí pwm_out = 1, else pwm_out = 0.

When counter == PERIOD ‚Üí counter resets to 0 and optional interrupt triggers.
=============================================================================================================================

Day 3rd 11/9/2025: No more twin day
+ B·ªï sung v√† ch·ªânh s·ª≠a spec:
Thi·∫øt k·∫ø IP Core PWM 16-bit tr√™n FPGA
üîë T√≥m t·∫Øt t√≠nh nƒÉng

Giao ti·∫øp chu·∫©n APB: Cho ph√©p CPU ho·∫∑c SoC c·∫•u h√¨nh th√¥ng qua bus AMBA APB.

ƒê·ªô ph√¢n gi·∫£i 16-bit: Counter, PERIOD v√† DUTY_CYCLE ƒë·ªÅu 16-bit.

ƒêi·ªÅu ch·ªânh linh ho·∫°t:

Thanh ghi PERIOD x√°c ƒë·ªãnh ƒë·ªô d√†i chu k·ª≥.

Thanh ghi DUTY_CYCLE x√°c ƒë·ªãnh ƒë·ªô r·ªông xung (t·ªâ l·ªá ph·∫ßn trƒÉm duty).

H·ªó tr·ª£ duty t·ª´ 0% ‚Üí 100%.

Prescaler: Gi·∫£m t·∫ßn s·ªë clock ƒë·∫ßu v√†o ƒë·ªÉ t·∫°o PWM t·∫ßn s·ªë th·∫•p.

Ng·∫Øt (Interrupt):

Ng·∫Øt khi Counter reset (cu·ªëi chu k·ª≥).

Ng·∫Øt khi Counter ƒë·∫°t DUTY_CYCLE.

ƒêa k√™nh PWM: H·ªó tr·ª£ nhi·ªÅu k√™nh PWM ƒë·ªôc l·∫≠p (v√≠ d·ª• 4 k√™nh).

Ch·∫ø ƒë·ªô ho·∫°t ƒë·ªông:

Edge-aligned PWM (ƒë·∫øm l√™n).

Center-aligned PWM (ƒë·∫øm l√™n‚Äìxu·ªëng).

·ª®ng d·ª•ng: ƒêi·ªÅu khi·ªÉn t·ªëc ƒë·ªô ƒë·ªông c∆° DC, servo, LED dimming, DAC s·ªë.

üèóÔ∏è Ki·∫øn tr√∫c h·ªá th·ªëng
1. PWM_TOP

Kh·ªëi t√≠ch h·ª£p to√†n b·ªô IP.

K·∫øt n·ªëi tr·ª±c ti·∫øp v·ªõi APB bus.

Qu·∫£n l√Ω c√°c module con: Register, Counter, Comparator, Prescaler, Interrupt.

Xu·∫•t t√≠n hi·ªáu PWM_OUT cho t·ª´ng k√™nh.

2. APB Interface

X·ª≠ l√Ω c√°c t√≠n hi·ªáu APB (psel, penable, pwrite, paddr, pwdata, prdata).

Sinh ra t√≠n hi·ªáu ƒëi·ªÅu khi·ªÉn wr_en, rd_en cho Register.

3. Register Block

L∆∞u tr·ªØ c√°c thanh ghi c·∫•u h√¨nh:

PERIOD (16-bit)

DUTY_CYCLE_CHx (16-bit, cho t·ª´ng k√™nh)

CONTROL (Enable, Mode, Prescaler select)

STATUS (C·ªù tr·∫°ng th√°i, ng·∫Øt)

C·∫ßu n·ªëi gi·ªØa ph·∫ßn m·ªÅm (CPU) v√† ph·∫ßn c·ª©ng (Counter, Comparator).

4. Prescaler

Gi·∫£m t·∫ßn s·ªë xung clock ƒë·∫ßu v√†o.

Cho ph√©p PWM ho·∫°t ƒë·ªông ·ªü nhi·ªÅu d·∫£i t·∫ßn s·ªë kh√°c nhau.

C·∫•u h√¨nh th√¥ng qua thanh ghi CONTROL.

5. Counter

Counter 16-bit, c√≥ th·ªÉ ho·∫°t ƒë·ªông ·ªü 2 ch·∫ø ƒë·ªô:

Up counter: ƒë·∫øm t·ª´ 0 ‚Üí PERIOD r·ªìi reset.

Up-Down counter: ƒë·∫øm l√™n ‚Üí PERIOD, sau ƒë√≥ ƒë·∫øm xu·ªëng ‚Üí 0.

Cung c·∫•p gi√° tr·ªã counter_value cho Comparator.

6. Comparator

So s√°nh counter_value v·ªõi DUTY_CYCLE.

N·∫øu counter < duty_cycle ‚Üí pwm_out = 1, ng∆∞·ª£c l·∫°i pwm_out = 0.

H·ªó tr·ª£ nhi·ªÅu k√™nh, m·ªói k√™nh c√≥ comparator ri√™ng.

7. Interrupt Block

Sinh t√≠n hi·ªáu ng·∫Øt khi:

Counter reset v·ªÅ 0 (cu·ªëi chu k·ª≥).

Counter == DUTY_CYCLE.

Cho ph√©p CPU d·ªÖ d√†ng ƒë·ªìng b·ªô ho·∫∑c gi√°m s√°t t√≠n hi·ªáu PWM.
===========================================================================================================================
Day 4th 15/09/2025: After sickness
B·ªï sung ki·∫øn th·ª©c v·ªÅ deadtime, l√†m m·ªôt s·ªë b√†i t·∫≠p li√™n quan ƒë·∫øn PWM ƒë·ªÉ c·ªßng c·ªë ki·∫øn th·ª©c.
Th·ª≠ nghi·ªám PWM v·ªõi servo.
============================================================================================================================
Day 5th 17/09/2025: Forgoten day
Qu√™n ghi ng√†y 16 n√™n coi nh∆∞ 17 l√† day 5th
h·ªçc s·ª≠ d·ª•ng tang nano 9k
cho ƒë√®n nh·∫•p nh√°y: d·ª± ƒë·ªãnh cho s√°ng m·ªù d·∫ßn v√† s√°ng d·∫ßn nh∆∞ ki·ªÉu breathing nh∆∞ng m√† d∆∞·ªùng nh∆∞ l√† 9k kh√¥ng l√†m ƒë∆∞·ª£c
===========================================================================================================================
Day 6th 22/09/2025: Midnight memory is somekind of nightmare
Ho√†n th√†nh v·∫Ω block diagram theo spec
========================================================================================================================
Day 7th 23/09/2025: Hurricane incoming!
Lo ho√†n th√†nh th·ªß t·ª•c ƒëƒÉng k√≠ ƒë·ªì √°n, th·ªß t·ª•c tr√¥ng v·∫ª r∆∞·ªùm r√† v√† kh√≥ ƒëo√°n
=======================================================================================================================
Day 8th 26/09/2025: 1yrs streak of warthunder!
b·∫Øt ƒë·∫ßu v·ªõi b·ªô ƒë·∫øm counter
theo spec c≈© b·ªô ƒë·∫øm c√≥ 16bit, s·ª≠a l·∫°i th√†nh 64bit
c√≥ 2 ch·∫ø ƒë·ªô ƒë·∫øm: up v√† up down
chat gpt c√≥ g·ª£i √Ω v·ªÅ vi·ªác l·∫•y 16bit ƒëi so s√°nh, ch∆∞a hi·ªÉu nghƒ©a l√† sao?
========================================================================================================================
Day 9th 27/09/2025: Lazy sunday
b·ªï sung th√™m module prescaler
ƒë·ªÅ xu·∫•t thay ƒë·ªïi c√°c thanh ghi c·ªßa register
comparator l√†m 1 k√™nh tr∆∞·ªõc
========================================================================================================================
Day 10th 2/10/2025: Bad interview!
c√≥ 1 b·ªô g·∫ßn nh∆∞ ƒë·∫ßy ƒë·ªß 
chu·∫©n b·ªã ki·ªÉm th·ª≠
ƒë√£ ƒë∆∞·ª£c c·∫•p i2c ƒë·ªÉ th·ª≠
n·∫°p l√™n fpga 9k ƒë·ªÉ test, n·∫øu ko ƒë∆∞·ª£c x√¢y d·ª±ng l·∫°i t·ª´ ƒë·∫ßu
===================================================================================================================================
Day 11th 6/10/2025: Trung thu Festival
n·∫°p RTL l√™n fpga, nh√°y led, led nh√°y nhanh
ƒëang t√¨m c√°ch giao ti·∫øp i2c apb
==============================================================================================================================
Day 12th 7/10/2025: Electricity fixing day
led breathing, pwm 2 k√™nh, t∆∞·ªüng code l·ªói h√≥a ra c·∫Øm sai ch√¢n
suy nghƒ© ph√°t tri·ªÉn th√™m
√Ω t∆∞·ªüng ghi b√°o c√°o: i2c_apb + timer ip + PWM IP
